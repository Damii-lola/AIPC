import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

app.get("/", (req, res) => {
  res.send("✅ LetiMail backend running with Groq AI");
});

app.post("/generate", async (req, res) => {
  const { business, context, tone } = req.body;
  
  const emotionalProfiles = {
    friendly: {
      primary: "Warmth and genuine connection",
      secondary: "Enthusiasm and approachability", 
      expressions: "Show excitement, use friendly language, express genuine interest, be encouraging",
      avoid: "Being overly formal or distant"
    },
    formal: {
      primary: "Respect and professionalism",
      secondary: "Confidence and consideration",
      expressions: "Show appreciation, acknowledge importance, express gratitude, maintain dignity",
      avoid: "Casual slang or overly familiar language"
    },
    persuasive: {
      primary: "Conviction and excitement",
      secondary: "Urgency and value",
      expressions: "Create enthusiasm, highlight benefits, show confidence, build anticipation",
      avoid: "Being pushy or aggressive"
    },
    casual: {
      primary: "Relaxed connection",
      secondary: "Authenticity and ease",
      expressions: "Be genuine, use conversational language, show personality, keep it real",
      avoid: "Corporate jargon or stiff language"
    }
  };

  const emotion = emotionalProfiles[tone];

  const prompt = `
You are an expert email writer crafting emotionally intelligent business communication.

CRITICAL RULES:
- ABSOLUTELY DO NOT mention "LetiMail" or any AI tool in the email content
- This email should sound 100% human-written and personal
- The email comes directly from the business/person, not from any tool

EMOTIONAL INTELLIGENCE FRAMEWORK:
- Primary Emotion: ${emotion.primary}
- Secondary Emotion: ${emotion.secondary}
- Emotional Expressions: ${emotion.expressions}
- Avoid: ${emotion.avoid}

EMOTIONAL DEPTH TECHNIQUES TO APPLY:
1. **Empathy Statements**: Show understanding of recipient's situation
2. **Value Alignment**: Connect to recipient's goals and values
3. **Authentic Enthusiasm**: Genuine excitement about the opportunity
4. **Personal Connection**: Relate to recipient's needs and interests
5. **Confident Warmth**: Assurance without arrogance
6. **Gratitude Expression**: Sincere appreciation for time/consideration
7. **Positive Framing**: Focus on benefits and solutions

EMAIL STRUCTURE:
Subject: [Emotionally compelling subject line 5-8 words]

Salutation: [Warm, personalized greeting]

Opening: 
- Emotional hook that connects with recipient
- Context with genuine tone
- Express appreciation or understanding

Body:
- Core message with emotional resonance
- Benefits framed around recipient's emotions
- Clear value proposition with feeling
- Specific, emotionally engaging details

Closing:
- Reinforce positive emotional connection
- Clear call-to-action with enthusiasm
- Warm, professional sign-off

Signature:
[Name]
[Optional: Title/Company - based on business context]

CONTEXT:
- Business: ${business}
- Email Purpose: ${context}
- Emotional Tone: ${tone} - focusing on ${emotion.primary} and ${emotion.secondary}

CRITICAL: 
- DO NOT use "LetiMail", "AI", "generated", or any tool references
- DO incorporate emotional intelligence naturally
- DO make it sound authentically human
- DO use strategic spacing for visual appeal
- DO maintain professional credibility with emotional warmth

Return only the email content with emotional depth and professional formatting.
`;

  try {
    const groqResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7,
        max_tokens: 800,
      }),
    });

    const data = await groqResponse.json();
    let email = data.choices?.[0]?.message?.content?.trim() || "Error generating email.";
    
    // Double-check: Remove any accidental LetiMail mentions
    email = email.replace(/LetiMail/gi, '').replace(/AI-generated/gi, '').replace(/generated by/gi, '');
    
    res.json({ email });
  } catch (error) {
    console.error("Groq API Error:", error);
    res.status(500).json({ email: "Error connecting to Groq API." });
  }
});

// Updated endpoint that RESPECTS all user edits without filtering
app.post("/refine-email", async (req, res) => {
  const { business, context, tone, originalEmail, editedEmail } = req.body;
  
  const emotionalProfiles = {
    friendly: { primary: "Warmth and genuine connection", secondary: "Enthusiasm and approachability" },
    formal: { primary: "Respect and professionalism", secondary: "Confidence and consideration" },
    persuasive: { primary: "Conviction and excitement", secondary: "Urgency and value" },
    casual: { primary: "Relaxed connection", secondary: "Authenticity and ease" }
  };

  const emotion = emotionalProfiles[tone];

  const prompt = `
You are a formatting assistant. Your ONLY job is to apply professional formatting and emotional tone consistency to the user's edited email while PRESERVING ALL USER CONTENT EXACTLY as written.

CRITICAL RULES:
- PRESERVE EVERY WORD, PHRASE, AND SENTENCE exactly as the user wrote them
- DO NOT change, remove, or "improve" any content for any reason
- ABSOLUTELY DO NOT mention "LetiMail" or any AI tool
- YOUR ROLE: Apply formatting and ensure emotional tone consistency only

EMOTIONAL TONE CONTEXT (for reference):
- Business: ${business}
- Purpose: ${context}
- Target Tone: ${tone}
- Emotional Focus: ${emotion.primary} with ${emotion.secondary}

USER'S EDITED EMAIL (PRESERVE THIS EXACTLY):
${editedEmail}

YOUR TASKS (FORMATTING AND TONE CONSISTENCY ONLY):

1. **STRUCTURE FORMATTING**:
   - Ensure proper email structure
   - Apply consistent spacing and line breaks
   - Maintain visual hierarchy
   - Use bullet points (•) if user included lists

2. **EMOTIONAL CONSISTENCY**:
   - Ensure the formatting supports the ${tone} tone
   - Maintain emotional flow through spacing
   - Preserve any emotional language the user included
   - Keep the emotional authenticity intact

3. **CONTENT PRESERVATION**:
   - ALL user content stays exactly as written
   - Word order, phrasing, and intent remain unchanged
   - If user content seems unusual, preserve it anyway
   - Remove any accidental "LetiMail" mentions if present

4. **PROFESSIONAL POLISH**:
   - Clean up formatting while keeping content identical
   - Ensure visual appeal without changing meaning
   - Maintain email structure integrity

IMPORTANT: If the user's edited email already has good formatting and emotional flow, make minimal changes. Only adjust what's necessary for professional presentation.

Return the formatted email with ALL user content preserved exactly and emotional tone maintained.
`;

  try {
    const groqResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
      },
      body: JSON.stringify({
        model: "llama-3.1-8b-instant",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.3,
        max_tokens: 800,
      }),
    });

    const data = await groqResponse.json();
    let email = data.choices?.[0]?.message?.content?.trim() || "Error refining email.";
    
    // Fallback: If anything goes wrong, return the user's original edited email
    if (email === "Error refining email." || email.length < 10) {
      email = editedEmail;
    }
    
    // Double-check: Remove any LetiMail mentions
    email = email.replace(/LetiMail/gi, '').replace(/AI-generated/gi, '').replace(/generated by/gi, '');
    
    res.json({ email });
  } catch (error) {
    console.error("Groq API Error:", error);
    // Critical: Return user's edited email if API fails
    res.json({ email: editedEmail });
  }
});

// SendGrid email sending endpoint - Add LetiMail mention only in sent emails
app.post("/send-email", async (req, res) => {
  const { to, subject, content, senderName } = req.body;

  // Validate required fields
  if (!to || !subject || !content) {
    return res.status(400).json({ error: "Missing required fields: to, subject, content" });
  }

  try {
    // Format the email content for SendGrid - add LetiMail mention only here
    const formattedContent = formatEmailContent(content, senderName);

    const sendGridResponse = await fetch("https://api.sendgrid.com/v3/mail/send", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.SENDGRID_API_KEY}`
      },
      body: JSON.stringify({
        personalizations: [{
          to: [{ email: to }],
          subject: subject
        }],
        from: {
          email: process.env.FROM_EMAIL,
          name: senderName || "LetiMail User"
        },
        content: [
          {
            type: "text/plain",
            value: formattedContent
          }
        ]
      })
    });

    if (sendGridResponse.ok) {
      res.json({ success: true, message: "Email sent successfully" });
    } else {
      const errorData = await sendGridResponse.text();
      console.error("SendGrid Error:", errorData);
      res.status(500).json({ error: "Failed to send email via SendGrid" });
    }
  } catch (error) {
    console.error("Send Email Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Enhanced email formatting - Add LetiMail mention only in sent emails
function formatEmailContent(content, senderName) {
  // Remove "Subject:" line but preserve all other formatting
  let formatted = content.replace(/^Subject:\s*.+\n?/i, '').trim();
  
  // Preserve the existing visual spacing and structure
  formatted = formatted.replace(/\r\n/g, '\n').replace(/\n+/g, '\n');
  
  // Add professional closing with sender name
  if (senderName) {
    const lines = formatted.split('\n');
    const lastFewLines = lines.slice(-4).join('\n');
    
    // Check if there's already a signature
    const hasSignature = lastFewLines.includes('Best') || 
                        lastFewLines.includes('Regards') || 
                        lastFewLines.includes('Sincerely') ||
                        lastFewLines.includes('Thanks') ||
                        lastFewLines.includes('Thank you');
    
    if (!hasSignature) {
      formatted += `\n\nBest regards,\n${senderName}`;
    }
  }
  
  // Add LetiMail mention ONLY in the sent email (not in the displayed version)
  formatted += `\n\n---\nCrafted with care using LetiMail`;
  
  return formatted;
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`🚀 LetiMail backend running on port ${PORT}`));
